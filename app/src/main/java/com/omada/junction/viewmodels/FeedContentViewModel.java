package com.omada.junction.viewmodels;

import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

import com.omada.junction.data.models.external.OrganizationModel;
import com.omada.junction.utils.taskhandler.LiveEvent;
import com.omada.junction.viewmodels.content.AnnouncementViewHandler;
import com.omada.junction.viewmodels.content.ArticleViewHandler;
import com.omada.junction.viewmodels.content.EventViewHandler;
import com.omada.junction.viewmodels.content.LeaderboardViewHandler;
import com.omada.junction.viewmodels.content.OrganizationViewHandler;


public class FeedContentViewModel extends BaseViewModel{

    private final MutableLiveData<LiveEvent<String>> organizationDetailsTrigger = new MutableLiveData<>();

    // These handlers are responsible for handling events on each individual content (cards, etc)
    // not for loading stuff into feed
    private final EventViewHandler eventViewHandler = new EventViewHandler();
    private final LeaderboardViewHandler leaderboardViewHandler = new LeaderboardViewHandler();
    private final AnnouncementViewHandler announcementViewHandler = new AnnouncementViewHandler();
    private final ArticleViewHandler articleViewHandler = new ArticleViewHandler();
    private final OrganizationViewHandler organizationViewHandler = new OrganizationViewHandler();

    /*
     takes care of doing everything related to an event after it is loaded into UI
     (details, registration, etc)
    */
    public EventViewHandler getEventViewHandler() {
        return eventViewHandler;
    }

    public ArticleViewHandler getArticleViewHandler() {
        return articleViewHandler;
    }

    public AnnouncementViewHandler getAnnouncementViewHandler() {
        return announcementViewHandler;
    }

    public LeaderboardViewHandler getLeaderboardViewHandler() {
        return leaderboardViewHandler;
    }

    public OrganizationViewHandler getOrganizationViewHandler(){
        return organizationViewHandler;
    }

    /*
    This is placed here because content is generated by the organizers and it makes sense to handle
    organizer details action from here. It is not placed inside the viewHandlers to avoid duplication of
    code
     */

    public void goToOrganization(String organizationID){
        organizationDetailsTrigger.setValue(new LiveEvent<>(organizationID));
    }

    public MutableLiveData<LiveEvent<String>> getOrganizationDetailsTrigger() {
        return organizationDetailsTrigger;
    }
}
